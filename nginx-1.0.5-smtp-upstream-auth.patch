diff -crB nginx-1.0.5.orig/src/mail/ngx_mail.h nginx-1.0.5.new/src/mail/ngx_mail.h
*** nginx-1.0.5.orig/src/mail/ngx_mail.h	2009-11-02 15:14:17.000000000 +0000
--- nginx-1.0.5.new/src/mail/ngx_mail.h	2011-12-07 20:07:05.571195903 +0000
***************
*** 168,174 ****
      ngx_smtp_xclient_from,
      ngx_smtp_xclient_helo,
      ngx_smtp_from,
!     ngx_smtp_to
  } ngx_smtp_state_e;
  
  
--- 168,177 ----
      ngx_smtp_xclient_from,
      ngx_smtp_xclient_helo,
      ngx_smtp_from,
!     ngx_smtp_to,
!     ngx_smtp_user,
!     ngx_smtp_pass,
!     ngx_smtp_authok
  } ngx_smtp_state_e;
  
  
diff -crB nginx-1.0.5.orig/src/mail/ngx_mail_proxy_module.c nginx-1.0.5.new/src/mail/ngx_mail_proxy_module.c
*** nginx-1.0.5.orig/src/mail/ngx_mail_proxy_module.c	2010-05-14 09:56:37.000000000 +0000
--- nginx-1.0.5.new/src/mail/ngx_mail_proxy_module.c	2011-12-11 12:13:03.179154456 +0000
***************
*** 630,636 ****
--- 630,693 ----
  
          break;
  
+     case ngx_smtp_user:
+ 
+         ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, "mail proxy send user");
+         s->connection->log->action = "sending user name to upstream";
+ 
+         line.data = ngx_pnalloc(c->pool, ngx_base64_encoded_length(s->login.len) + 2);
+         if (line.data == NULL) {
+             ngx_mail_proxy_internal_server_error(s);
+             return;
+         }
+ 
+         ngx_encode_base64(&line, &s->login);
+         line.data[line.len++] = CR;
+         line.data[line.len++] = LF;
+ 
+         s->mail_state = ngx_smtp_pass;
+         break;
+ 
+     case ngx_smtp_pass:
+ 
+         ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, "mail proxy send pass");
+         s->connection->log->action = "sending password to upstream";
+ 
+         line.data = ngx_pnalloc(c->pool, ngx_base64_encoded_length(s->passwd.len) + 2);
+         if (line.data == NULL) {
+             ngx_mail_proxy_internal_server_error(s);
+             return;
+         }
+ 
+         ngx_encode_base64(&line, &s->passwd);
+         line.data[line.len++] = CR;
+         line.data[line.len++] = LF;
+ 
+         s->mail_state = ngx_smtp_authok;
+         break;
+ 
      case ngx_smtp_helo:
+ 
+         // attempt to login if username and password were returned by auth http
+         if(s->login.len && s->passwd.len) {
+             ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, 
+                 "mail proxy send auth login");
+             s->connection->log->action = "sending auth login to upstream";
+ 
+             line.len = sizeof("AUTH LOGIN") + 1;
+             line.data = ngx_pnalloc(c->pool, line.len);
+             if (line.data == NULL) {
+                 ngx_mail_proxy_internal_server_error(s);
+                 return;
+             }
+             p = ngx_cpymem(line.data, "AUTH LOGIN", sizeof("AUTH LOGIN") - 1);
+             *p++ = CR; *p = LF;
+             s->mail_state = ngx_smtp_user;
+             break;
+         }
+         // fall through if not trying to log in...
+ 
+     case ngx_smtp_authok:
      case ngx_smtp_xclient:
      case ngx_smtp_to:
  
***************
*** 701,707 ****
  static ngx_int_t
  ngx_mail_proxy_read_response(ngx_mail_session_t *s, ngx_uint_t state)
  {
!     u_char                 *p;
      ssize_t                 n;
      ngx_buf_t              *b;
      ngx_mail_proxy_conf_t  *pcf;
--- 758,764 ----
  static ngx_int_t
  ngx_mail_proxy_read_response(ngx_mail_session_t *s, ngx_uint_t state)
  {
!     u_char                 *p, *m;
      ssize_t                 n;
      ngx_buf_t              *b;
      ngx_mail_proxy_conf_t  *pcf;
***************
*** 778,783 ****
--- 835,856 ----
          break;
  
      default: /* NGX_MAIL_SMTP_PROTOCOL */
+ 
+         /* handle multiline replies */
+         if (p[3] == '-') {
+             /* check if we got last line */
+             m = b->last - 5;
+             while (m > b->pos) {
+                 if (m[0] == CR && m[1] == LF) {
+                     break;
+                 }
+                 m--;
+             }
+             if (m <= b->pos || m[5] == '-') {
+                 return NGX_AGAIN;
+             }
+         }
+ 
          switch (state) {
  
          case ngx_smtp_start:
***************
*** 802,807 ****
--- 875,893 ----
                  return NGX_OK;
              }
              break;
+ 
+         case ngx_smtp_user:
+         case ngx_smtp_pass:
+             if (p[0] == '3' && p[1] == '3' && p[2] == '4') {
+                 return NGX_OK;
+             }
+             break;
+ 
+         case ngx_smtp_authok:
+             if (p[0] == '2' && p[1] == '3' && p[2] == '5') {
+                 return NGX_OK;
+             }
+             break;
  
          case ngx_smtp_to:
              return NGX_OK;
